from typing import Iterable
from sqlalchemy.orm import Session
from sqlalchemy import update, delete, select, DECIMAL
from sqlalchemy.sql.functions import sum
from sqlalchemy.exc import IntegrityError
from database.models import Users, Categories, Products, Carts, FinallyCarts
from database.base import engine
from sqlalchemy import select, join
from sqlalchemy.sql import func

with Session(engine) as session:
    db_session = session


def db_register_user(full_name, chat_id):
    """—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é–∑–µ—Ä–∞ –≤ –¥–±"""
    try:
        query = Users(name=full_name, telegram=chat_id)
        db_session.add(query)
        db_session.commit()
        return False
    except IntegrityError:
        db_session.rollback()
        return True


def db_update_user(chat_id, phone: str):
    """–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —é–∑–µ—Ä–∞, –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ç–∏–ø–∞"""
    query = update(Users).where(Users.telegram == chat_id).values(phone=phone)
    db_session.execute(query)
    db_session.commit()


def db_create_user_cart(chat_id):
    """—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —é–∑–µ—Ä–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 —é–∑–µ—Ä=1 –∫–æ—Ä–∑–∏–Ω–∞, –∞ —Ç–∞–∫–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        subquery = db_session.scalar(select(Users).where(Users.telegram == chat_id))
        query = Carts(user_id=subquery.id)
        db_session.add(query)
        db_session.commit()
        return True
    except IntegrityError:
        db_session.rollback()
    except AttributeError:
        db_session.rollback()


def db_get_all_category():
    """–ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    query = select(Categories)
    return db_session.scalars(query)


def db_get_finally_price(chat_id):
    """–ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã"""
    query = select(func.sum(FinallyCarts.final_price)). \
        select_from(
        join(Carts, FinallyCarts, Carts.id == FinallyCarts.cart_id)
    ). \
        join(Users, Users.id == Carts.user_id). \
        where(Users.telegram == chat_id)

    return db_session.execute(query).fetchone()[0]


def db_get_last_orders(chat_id: int, limit: int = 5):
    """–ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = (
        select(FinallyCarts)
        .join(Carts, FinallyCarts.cart_id == Carts.id)
        .join(Users, Users.id == Carts.user_id)
        .where(Users.telegram == chat_id)
        .order_by(FinallyCarts.id.desc())
        .limit(limit)
    )
    return db_session.scalars(query).all()


def db_get_cart_items(chat_id: int):
    """–ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = (
        select(FinallyCarts)
        .join(Carts, FinallyCarts.cart_id == Carts.id)
        .join(Users, Users.id == Carts.user_id)
        .where(Users.telegram == chat_id)
    )
    return db_session.scalars(query).all()


def db_get_product(category_id):
    """–ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = select(Products).where(Products.category_id == category_id)
    return db_session.scalars(query)


def db_add_products(products_data: list[dict]):
    """–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–ª—è –¥–æ–ø. –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä—è–º–æ –∏–∑ –º–æ–¥—É–ª—è"""
    try:
        for data in products_data:
            category = db_session.scalar(
                select(Categories).where(Categories.category_name == data["category_name"])
            )
            if not category:
                print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {data['category_name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                continue

            product = Products(
                product_name=data["product_name"],
                description=data["description"],
                image=data["image"],
                price=data["price"],
                category_id=category.id
            )
            db_session.add(product)

        db_session.commit()
        print("–ü—Ä–æ–¥—É–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    except IntegrityError as e:
        db_session.rollback()
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")


def db_get_product_by_id(product_id: int) -> Products:
    """–ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –µ–≥–æ id"""
    query = select(Products).where(Products.id == product_id)
    return db_session.scalar(query)


def db_get_user_cart(chat_id: int) -> Carts:
    """–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ id"""
    query = select(Carts).join(Users).where(Users.telegram == chat_id)
    return db_session.scalar(query)


def db_update_to_cart(price: DECIMAL, cart_id: int, quantity=1) -> None:
    """–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ id"""
    query = update(Carts).where(Carts.id == cart_id).values(total_price=price, total_products=quantity)
    db_session.execute(query)
    db_session.commit()


def update_product_image(product_name: str, new_image_path: str):
    """–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product = db_session.scalar(
        select(Products).where(Products.product_name == product_name)
    )

    if not product:
        print(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    print(f"üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è '{product_name}'...")
    product.image = new_image_path
    db_session.commit()
    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")



# if __name__ == "__main__":
#     update_product_image("–ú–µ–¥–æ–≤–∏–∫", "media/cakes/hone_cake.jpg")
#     update_product_image("–ù–∞–ø–æ–ª–µ–æ–Ω", "media/cakes/cake_napoleon.jpg")
#     update_product_image("–ü—Ç–∏—á—å–µ –º–æ–ª–æ–∫–æ", "media/cakes/cake_milk.jpg")

#     products = [
# {
#     "product_name": "–û–≤—Å—è–Ω–æ–µ –ø–µ—á–µ–Ω—å–µ",
#     "description": "–î–æ–º–∞—à–Ω–µ–µ –æ–≤—Å—è–Ω–æ–µ –ø–µ—á–µ–Ω—å–µ",
#     "image": "media/cookies/ovsyanoe.jpg",
#     "price": 15.50,
#     "category_name": "–ü–µ—á–µ–Ω—å–µ"
# },
# {
#     "product_name": "–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –ø–µ—á–µ–Ω—å–µ",
#     "description": "–ü–µ—á–µ–Ω—å–µ —Å –∫—É—Å–æ—á–∫–∞–º–∏ —à–æ–∫–æ–ª–∞–¥–∞",
#     "image": "media/cookies/choco_cookie.jpg",
#     "price": 22.00,
#     "category_name": "–ü–µ—á–µ–Ω—å–µ"
# },
# {
#     "product_name": "–ö–æ–∫–æ—Å–æ–≤–æ–µ –ø–µ—á–µ–Ω—å–µ",
#     "description": "–° —Ö—Ä—É—Å—Ç—è—â–µ–π –∫–æ—Ä–æ—á–∫–æ–π –∏ –∫–æ–∫–æ—Å–æ–≤–æ–π —Å—Ç—Ä—É–∂–∫–æ–π",
#     "image": "media/cookies/kokos_cookie.jpg",
#     "price": 28.00,
#     "category_name": "–ü–µ—á–µ–Ω—å–µ"
# },

#     {
#         "product_name": "–ú–µ–¥–æ–≤–∏–∫",
#         "description": "–¢–æ—Ä—Ç —Å –º–µ–¥–æ–º –∏ –∫–æ—Ä–∏—á–Ω–µ–≤—ã–º —Å–∞—Ö–∞—Ä–æ–º",
#         "image": "media\cakes\hone_cake.jpg",
#         "price": 50.00,
#         "category_name": "–¢–æ—Ä—Ç—ã"
#
#     }
# ]

    # db_add_products(products)
