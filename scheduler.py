import os
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from aiogram import Bot
import logging
from dotenv import load_dotenv
from database.utils import db_get_order_info

load_dotenv()


DATABASE_URL = os.getenv("DATABASE_URL")
BOT_TOKEN = os.getenv("TOKEN")
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID", "0"))


if not os.path.exists("logs"):
    os.makedirs("logs")

logging.basicConfig(
    filename="logs/reminders.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

jobstores = {
    'default': SQLAlchemyJobStore(url=DATABASE_URL)
}
scheduler = AsyncIOScheduler(jobstores=jobstores)


async def remind_manager(order_id: int, manager_chat_id: int):
    bot = Bot(token=BOT_TOKEN)

    order_info = db_get_order_info(order_id)
    if not order_info:
        logger.error(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        await bot.session.close()
        return

    text = (
        f"üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–∫–∞–∑ ‚Ññ{order_id} –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω —Ä–∞–Ω–µ–µ\n"
        f"–ö–ª–∏–µ–Ω—Ç: {order_info['username']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_info['phone']}\n"
        f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order_info['total_price']:.2f} BYN"
    )

    await bot.send_message(manager_chat_id, text)
    await bot.session.close()
    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (order_id={order_id})")


def schedule_reminder(order_id: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"""
    run_date = datetime.now() + timedelta(minutes=1)
    scheduler.add_job(
        remind_manager,
        "date",
        run_date=run_date,
        args=[order_id, MANAGER_CHAT_ID],
        id=f"reminder_{order_id}",
        replace_existing=True
    )
    logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {run_date}")


def start_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    if not scheduler.running:
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
